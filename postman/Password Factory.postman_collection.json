{
	"info": {
		"_postman_id": "03b853f1-dba6-4ce2-97ff-364264261336",
		"name": "Password Factory",
		"description": "#### Environment selection:\n\nBase URL can either be:\n\n*   **{{local}}:** If the application is running through *make* ***start-dev***\n*   **{{docker}}:** If the application is running on ***docker***",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "119266"
	},
	"item": [
		{
			"name": "generate number password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"password should have length 20\", function () {",
							"    response = pm.response.json();",
							"    const length = response[\"password\"].length",
							"    pm.expect(length).to.eql(20);",
							"});",
							"",
							"pm.test(\"password should only have numbers\", function () {",
							"    response = pm.response.json();",
							"    const password = response[\"password\"]",
							"    const num = isNaN(password)",
							"    pm.expect(num).to.eql(false);",
							"});",
							"",
							"pm.test(\"password should not have symbols\", function () {",
							"    var format = /[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]+/;",
							"",
							"    response = pm.response.json();",
							"    const password = response[\"password\"]",
							"    const symbol_password = format.test(password)",
							"    pm.expect(symbol_password).to.eql(false);",
							"});",
							"",
							"",
							"pm.test(\"password should not have lowercase alphabets\", function () {",
							"    response = pm.response.json();",
							"    const password = response[\"password\"]",
							"    const hasLowerCaseAlphabets = (/[a-z]/.test(password));",
							"    pm.expect(hasLowerCaseAlphabets).to.eql(false);",
							"});",
							"",
							"pm.test(\"password should not have uppercase alphabets\", function () {",
							"    response = pm.response.json();",
							"    const password = response[\"password\"]",
							"    const hasLowerCaseAlphabets = (/[A-Z]/.test(password));",
							"    pm.expect(hasLowerCaseAlphabets).to.eql(false);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{local}}/generate?length=20&numbers=1&lowercase=0&uppercase=0&symbols=0",
					"host": [
						"{{local}}"
					],
					"path": [
						"generate"
					],
					"query": [
						{
							"key": "length",
							"value": "20",
							"description": "Between 1 and 200"
						},
						{
							"key": "numbers",
							"value": "1",
							"description": "0 to turn off numbers and 1 to turn on"
						},
						{
							"key": "lowercase",
							"value": "0",
							"description": "0 to turn off numbers and 1 to turn on"
						},
						{
							"key": "uppercase",
							"value": "0",
							"description": "0 to turn off numbers and 1 to turn on"
						},
						{
							"key": "symbols",
							"value": "0",
							"description": "0 to turn off numbers and 1 to turn on"
						}
					]
				},
				"description": "#### Generate number password:\n\nGenerate number only password"
			},
			"response": [
				{
					"name": "generate number password",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:5000/generate?length=20&numbers=1",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"generate"
							],
							"query": [
								{
									"key": "length",
									"value": "20",
									"description": "Between 1 and 200"
								},
								{
									"key": "numbers",
									"value": "1",
									"description": "0 to turn off numbers and 1 to turn on"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Werkzeug/2.2.1 Python/3.8.9"
						},
						{
							"key": "Date",
							"value": "Mon, 08 Aug 2022 19:13:39 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "36"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Connection",
							"value": "close"
						}
					],
					"cookie": [],
					"body": "{\n    \"password\": \"07154338796781642005\"\n}"
				}
			]
		},
		{
			"name": "generate lowercase password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"password should have length 10\", function () {",
							"    response = pm.response.json();",
							"    const length = response[\"password\"].length",
							"    pm.expect(length).to.eql(10);",
							"});",
							"",
							"pm.test(\"password should only lowercase letters\", function () {",
							"    response = pm.response.json();",
							"    const password = response[\"password\"]",
							"    const lowered_password = password.toLowerCase()",
							"    pm.expect(password).to.eql(lowered_password);",
							"});",
							"",
							"pm.test(\"password should not have numbers\", function () {",
							"    response = pm.response.json();",
							"    const password = response[\"password\"]",
							"    const hasNum = /\\d/;",
							"    const pass_has_num = hasNum.test(password)",
							"    pm.expect(pass_has_num).to.eql(false);",
							"});",
							"pm.test(\"password should not have symbols\", function () {",
							"    var format = /[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]+/;",
							"",
							"    response = pm.response.json();",
							"    const password = response[\"password\"]",
							"    const symbol_password = format.test(password)",
							"    pm.expect(symbol_password).to.eql(false);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{local}}/generate?length=10&lowercase=1&numbers=0&uppercase=0&symbols=0",
					"host": [
						"{{local}}"
					],
					"path": [
						"generate"
					],
					"query": [
						{
							"key": "length",
							"value": "10",
							"description": "Between 1 and 200"
						},
						{
							"key": "lowercase",
							"value": "1",
							"description": "0 to turn off lowercase characters and 1 to turn on"
						},
						{
							"key": "numbers",
							"value": "0"
						},
						{
							"key": "uppercase",
							"value": "0"
						},
						{
							"key": "symbols",
							"value": "0"
						}
					]
				},
				"description": "#### Generate number password:\n\nGenerate lowercase character only password"
			},
			"response": [
				{
					"name": "generate lowercase password",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:5000/generate?length=10&lowercase=1&numbers=0&uppercase=0&symbols=0",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"generate"
							],
							"query": [
								{
									"key": "length",
									"value": "10",
									"description": "Between 1 and 200"
								},
								{
									"key": "lowercase",
									"value": "1",
									"description": "0 to turn off lowercase characters and 1 to turn on"
								},
								{
									"key": "numbers",
									"value": "0"
								},
								{
									"key": "uppercase",
									"value": "0"
								},
								{
									"key": "symbols",
									"value": "0"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Werkzeug/2.2.1 Python/3.8.9"
						},
						{
							"key": "Date",
							"value": "Mon, 08 Aug 2022 19:50:04 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "26"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Connection",
							"value": "close"
						}
					],
					"cookie": [],
					"body": "{\n    \"password\": \"zdkqyqkuxi\"\n}"
				}
			]
		},
		{
			"name": "generate uppercase password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"password should have length 9\", function () {",
							"    response = pm.response.json();",
							"    const length = response[\"password\"].length",
							"    pm.expect(length).to.eql(9);",
							"});",
							"",
							"pm.test(\"password should only uppercase letters\", function () {",
							"    response = pm.response.json();",
							"    const password = response[\"password\"]",
							"    const upper_password = password.toUpperCase()",
							"    pm.expect(password).to.eql(upper_password);",
							"});",
							"",
							"pm.test(\"password should not have numbers\", function () {",
							"    response = pm.response.json();",
							"    const password = response[\"password\"]",
							"    const hasNum = /\\d/;",
							"    const pass_has_num = hasNum.test(password)",
							"    pm.expect(pass_has_num).to.eql(false);",
							"});",
							"",
							"pm.test(\"password should not have symbols\", function () {",
							"    var format = /[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]+/;",
							"",
							"    response = pm.response.json();",
							"    const password = response[\"password\"]",
							"    const symbol_password = format.test(password)",
							"    pm.expect(symbol_password).to.eql(false);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{local}}/generate?length=9&uppercase=1&lowercase=0&numbers=0&symbols=0",
					"host": [
						"{{local}}"
					],
					"path": [
						"generate"
					],
					"query": [
						{
							"key": "length",
							"value": "9",
							"description": "Between 1 and 200"
						},
						{
							"key": "uppercase",
							"value": "1",
							"description": "0 to turn off  and 1 to turn on"
						},
						{
							"key": "lowercase",
							"value": "0"
						},
						{
							"key": "numbers",
							"value": "0"
						},
						{
							"key": "symbols",
							"value": "0"
						}
					]
				},
				"description": "#### Generate number password:\n\nGenerate uppercase character only password"
			},
			"response": [
				{
					"name": "generate uppercase password",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:5000/generate?length=9&uppercase=1&lowercase=0&numbers=0&symbols=0",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"generate"
							],
							"query": [
								{
									"key": "length",
									"value": "9",
									"description": "Between 1 and 200"
								},
								{
									"key": "uppercase",
									"value": "1",
									"description": "0 to turn off  and 1 to turn on"
								},
								{
									"key": "lowercase",
									"value": "0"
								},
								{
									"key": "numbers",
									"value": "0"
								},
								{
									"key": "symbols",
									"value": "0"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Werkzeug/2.2.1 Python/3.8.9"
						},
						{
							"key": "Date",
							"value": "Mon, 08 Aug 2022 19:54:01 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "25"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Connection",
							"value": "close"
						}
					],
					"cookie": [],
					"body": "{\n    \"password\": \"BTFPRYNTG\"\n}"
				}
			]
		},
		{
			"name": "generate symbol password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"password should have length 10\", function () {",
							"    response = pm.response.json();",
							"    const length = response[\"password\"].length",
							"    pm.expect(length).to.eql(10);",
							"});",
							"",
							"pm.test(\"password should  have symbols\", function () {",
							"    var format = /[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]+/;",
							"",
							"    response = pm.response.json();",
							"    const password = response[\"password\"]",
							"    const symbol_password = format.test(password)",
							"    pm.expect(symbol_password).to.eql(true);",
							"});",
							"",
							"pm.test(\"password should not have numbers\", function () {",
							"    response = pm.response.json();",
							"    const password = response[\"password\"]",
							"    const hasNum = /\\d/;",
							"    const pass_has_num = hasNum.test(password)",
							"    pm.expect(pass_has_num).to.eql(false);",
							"});",
							"",
							"pm.test(\"password should not have lowercase alphabets\", function () {",
							"    response = pm.response.json();",
							"    const password = response[\"password\"]",
							"    const hasLowerCaseAlphabets = (/[a-z]/.test(password));",
							"    pm.expect(hasLowerCaseAlphabets).to.eql(false);",
							"});",
							"",
							"pm.test(\"password should not have uppercase alphabets\", function () {",
							"    response = pm.response.json();",
							"    const password = response[\"password\"]",
							"    const hasLowerCaseAlphabets = (/[A-Z]/.test(password));",
							"    pm.expect(hasLowerCaseAlphabets).to.eql(false);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{local}}/generate?length=10&symbols=1&numbers=0&uppercase=0&lowercase=0",
					"host": [
						"{{local}}"
					],
					"path": [
						"generate"
					],
					"query": [
						{
							"key": "length",
							"value": "10",
							"description": "Between 1 and 200"
						},
						{
							"key": "symbols",
							"value": "1",
							"description": "0 to turn off and 1 to turn on"
						},
						{
							"key": "numbers",
							"value": "0"
						},
						{
							"key": "uppercase",
							"value": "0"
						},
						{
							"key": "lowercase",
							"value": "0"
						}
					]
				},
				"description": "#### Generate number password:\n\nGenerate special character only password"
			},
			"response": [
				{
					"name": "generate symbol password",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:5000/generate?length=10&symbols=1&numbers=0&uppercase=0&lowercase=0",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"generate"
							],
							"query": [
								{
									"key": "length",
									"value": "10",
									"description": "Between 1 and 200"
								},
								{
									"key": "symbols",
									"value": "1",
									"description": "0 to turn off and 1 to turn on"
								},
								{
									"key": "numbers",
									"value": "0"
								},
								{
									"key": "uppercase",
									"value": "0"
								},
								{
									"key": "lowercase",
									"value": "0"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Werkzeug/2.2.1 Python/3.8.9"
						},
						{
							"key": "Date",
							"value": "Mon, 08 Aug 2022 20:01:14 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "26"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Connection",
							"value": "close"
						}
					],
					"cookie": [],
					"body": "{\n    \"password\": \"%*:.(.'&+{\"\n}"
				}
			]
		},
		{
			"name": "generate all enabled",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"password should have length 200\", function () {",
							"    response = pm.response.json();",
							"    const length = response[\"password\"].length",
							"    pm.expect(length).to.eql(200);",
							"});",
							"",
							"pm.test(\"password should have symbols\", function () {",
							"    var format = /[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]+/;",
							"",
							"    response = pm.response.json();",
							"    const password = response[\"password\"]",
							"    const symbol_password = format.test(password)",
							"    pm.expect(symbol_password).to.eql(true);",
							"});",
							"",
							"pm.test(\"password should have numbers\", function () {",
							"    response = pm.response.json();",
							"    const password = response[\"password\"]",
							"    const hasNum = /\\d/;",
							"    const pass_has_num = hasNum.test(password)",
							"    pm.expect(pass_has_num).to.eql(true);",
							"});",
							"",
							"",
							"pm.test(\"password should have lowercase alphabets\", function () {",
							"    response = pm.response.json();",
							"    const password = response[\"password\"]",
							"    const hasLowerCaseAlphabets = (/[a-z]/.test(password));",
							"    pm.expect(hasLowerCaseAlphabets).to.eql(true);",
							"});",
							"",
							"pm.test(\"password should have uppercase alphabets\", function () {",
							"    response = pm.response.json();",
							"    const password = response[\"password\"]",
							"    const hasLowerCaseAlphabets = (/[A-Z]/.test(password));",
							"    pm.expect(hasLowerCaseAlphabets).to.eql(true);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{local}}/generate?length=200&numbers=1&lowercase=1&uppercase=1&symbols=1",
					"host": [
						"{{local}}"
					],
					"path": [
						"generate"
					],
					"query": [
						{
							"key": "length",
							"value": "200",
							"description": "Between 1 and 200"
						},
						{
							"key": "numbers",
							"value": "1",
							"description": "0 to turn off numbers and 1 to turn on"
						},
						{
							"key": "lowercase",
							"value": "1",
							"description": "0 to turn off lowercase characters and 1 to turn on"
						},
						{
							"key": "uppercase",
							"value": "1",
							"description": "0 to turn off  and 1 to turn on"
						},
						{
							"key": "symbols",
							"value": "1",
							"description": "0 to turn off and 1 to turn on"
						}
					]
				},
				"description": "This API call generates password based upon the params provided.\n\nThe password is generated by taking all the query params into consideration.\n\nThe password has length 10, has special characters, lowercase characters, uppercase characters and numbers."
			},
			"response": [
				{
					"name": "generate all enabled",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:5000/generate?length=10&numbers=1&lowercase=1&uppercase=1&symbols=1",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"generate"
							],
							"query": [
								{
									"key": "length",
									"value": "10",
									"description": "Between 1 and 200"
								},
								{
									"key": "numbers",
									"value": "1",
									"description": "0 to turn off numbers and 1 to turn on"
								},
								{
									"key": "lowercase",
									"value": "1",
									"description": "0 to turn off lowercase characters and 1 to turn on"
								},
								{
									"key": "uppercase",
									"value": "1",
									"description": "0 to turn off  and 1 to turn on"
								},
								{
									"key": "symbols",
									"value": "1",
									"description": "0 to turn off and 1 to turn on"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Werkzeug/2.2.1 Python/3.8.9"
						},
						{
							"key": "Date",
							"value": "Mon, 08 Aug 2022 19:15:41 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "26"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Connection",
							"value": "close"
						}
					],
					"cookie": [],
					"body": "{\n    \"password\": \"|[mZI3+Yj2\"\n}"
				}
			]
		},
		{
			"name": "generate all disabled",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"",
							"pm.test(\"return an error message\", function () {",
							"    response = pm.response.json();",
							"    const proposed_message = \"Atleast one feature should be active\"",
							"    const message = response[\"error\"][\"all\"][0]",
							"",
							"    pm.expect(message).to.eql(proposed_message);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{local}}/generate?length=10&numbers=0&lowercase=0&uppercase=0&symbols=0",
					"host": [
						"{{local}}"
					],
					"path": [
						"generate"
					],
					"query": [
						{
							"key": "length",
							"value": "10",
							"description": "Between 1 and 200"
						},
						{
							"key": "numbers",
							"value": "0",
							"description": "0 to turn off numbers and 1 to turn on"
						},
						{
							"key": "lowercase",
							"value": "0",
							"description": "0 to turn off lowercase characters and 1 to turn on"
						},
						{
							"key": "uppercase",
							"value": "0",
							"description": "0 to turn off  and 1 to turn on"
						},
						{
							"key": "symbols",
							"value": "0",
							"description": "0 to turn off and 1 to turn on"
						}
					]
				},
				"description": "#### All features disabled:\n\nGenerate error when all the features are disabled in password generation."
			},
			"response": [
				{
					"name": "generate all disabled",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:5000/generate?length=10&numbers=0&lowercase=0&uppercase=0&symbols=0",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"generate"
							],
							"query": [
								{
									"key": "length",
									"value": "10",
									"description": "Between 1 and 200"
								},
								{
									"key": "numbers",
									"value": "0",
									"description": "0 to turn off numbers and 1 to turn on"
								},
								{
									"key": "lowercase",
									"value": "0",
									"description": "0 to turn off lowercase characters and 1 to turn on"
								},
								{
									"key": "uppercase",
									"value": "0",
									"description": "0 to turn off  and 1 to turn on"
								},
								{
									"key": "symbols",
									"value": "0",
									"description": "0 to turn off and 1 to turn on"
								}
							]
						}
					},
					"status": "BAD REQUEST",
					"code": 400,
					"_postman_previewlanguage": "html",
					"header": [
						{
							"key": "Server",
							"value": "Werkzeug/2.2.1 Python/3.8.9"
						},
						{
							"key": "Date",
							"value": "Mon, 08 Aug 2022 19:15:50 GMT"
						},
						{
							"key": "Content-Type",
							"value": "text/html; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "49"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Connection",
							"value": "close"
						}
					],
					"cookie": [],
					"body": "{\"all\": [\"Atleast one feature should be active\"]}"
				}
			]
		},
		{
			"name": "generate all default",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{local}}/generate",
					"host": [
						"{{local}}"
					],
					"path": [
						"generate"
					]
				},
				"description": "#### use defaults from the server:\n\nGenerate password using the default values from the server\n\n#### **Defaults in .env file:**\n\n*   PASSWORD_LENGTH: 10\n*   PASSWORD_NUMBERS: 1\n*   PASSWORD_LOWER_CASE: 0\n*   PASSWORD_UPPER_CASE: 0\n*   PASSWORD_SPECIAL_SYMBOLS: 0"
			},
			"response": [
				{
					"name": "generate all default",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:5000/generate",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"generate"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Werkzeug/2.2.1 Python/3.8.9"
						},
						{
							"key": "Date",
							"value": "Mon, 08 Aug 2022 19:16:34 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "26"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Connection",
							"value": "close"
						}
					],
					"cookie": [],
					"body": "{\n    \"password\": \"2512935653\"\n}"
				}
			]
		},
		{
			"name": "generate with default lenght 10",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"password should have length 10\", function () {",
							"    response = pm.response.json();",
							"    const length = response[\"password\"].length",
							"    pm.expect(length).to.eql(10);",
							"});",
							"",
							"pm.test(\"password should only have numbers\", function () {",
							"    response = pm.response.json();",
							"    const password = response[\"password\"]",
							"    const num = isNaN(password)",
							"    pm.expect(num).to.eql(false);",
							"});",
							"",
							"pm.test(\"password should not have symbols\", function () {",
							"    var format = /[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]+/;",
							"",
							"    response = pm.response.json();",
							"    const password = response[\"password\"]",
							"    const symbol_password = format.test(password)",
							"    pm.expect(symbol_password).to.eql(false);",
							"});",
							"",
							"",
							"pm.test(\"password should not have lowercase alphabets\", function () {",
							"    response = pm.response.json();",
							"    const password = response[\"password\"]",
							"    const hasLowerCaseAlphabets = (/[a-z]/.test(password));",
							"    pm.expect(hasLowerCaseAlphabets).to.eql(false);",
							"});",
							"",
							"pm.test(\"password should not have uppercase alphabets\", function () {",
							"    response = pm.response.json();",
							"    const password = response[\"password\"]",
							"    const hasLowerCaseAlphabets = (/[A-Z]/.test(password));",
							"    pm.expect(hasLowerCaseAlphabets).to.eql(false);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{local}}/generate?numbers=1&lowercase=0&uppercase=0&symbols=0",
					"host": [
						"{{local}}"
					],
					"path": [
						"generate"
					],
					"query": [
						{
							"key": "numbers",
							"value": "1",
							"description": "0 to turn off numbers and 1 to turn on"
						},
						{
							"key": "lowercase",
							"value": "0",
							"description": "0 to turn off numbers and 1 to turn on"
						},
						{
							"key": "uppercase",
							"value": "0",
							"description": "0 to turn off numbers and 1 to turn on"
						},
						{
							"key": "symbols",
							"value": "0",
							"description": "0 to turn off numbers and 1 to turn on"
						}
					]
				},
				"description": "#### Generate with default length:\n\nGenerate password with default length that can be configured from the environment variable. It is set as 10 in the .env file."
			},
			"response": [
				{
					"name": "generate with default lenght",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:5000/generate?numbers=1&lowercase=0&uppercase=0&symbols=0",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"generate"
							],
							"query": [
								{
									"key": "numbers",
									"value": "1",
									"description": "0 to turn off numbers and 1 to turn on"
								},
								{
									"key": "lowercase",
									"value": "0",
									"description": "0 to turn off numbers and 1 to turn on"
								},
								{
									"key": "uppercase",
									"value": "0",
									"description": "0 to turn off numbers and 1 to turn on"
								},
								{
									"key": "symbols",
									"value": "0",
									"description": "0 to turn off numbers and 1 to turn on"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Werkzeug/2.2.1 Python/3.8.9"
						},
						{
							"key": "Date",
							"value": "Mon, 08 Aug 2022 19:16:42 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "26"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Connection",
							"value": "close"
						}
					],
					"cookie": [],
					"body": "{\n    \"password\": \"9659256490\"\n}"
				}
			]
		},
		{
			"name": "generate with lenght 0",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"",
							"pm.test(\"return an error message\", function () {",
							"    response = pm.response.json();",
							"    const proposed_message = \"Must be greater than or equal to 5 and less than or equal to 200.\"",
							"    const message = response[\"error\"][\"length\"][0]",
							"",
							"    pm.expect(message).to.eql(proposed_message);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{local}}/generate?length=0&numbers=1",
					"host": [
						"{{local}}"
					],
					"path": [
						"generate"
					],
					"query": [
						{
							"key": "length",
							"value": "0",
							"description": "Between 1 and 200"
						},
						{
							"key": "numbers",
							"value": "1",
							"description": "0 to turn off numbers and 1 to turn on"
						}
					]
				},
				"description": "#### Generate with length 201:\n\nGenerate error when password length provided is 0"
			},
			"response": [
				{
					"name": "generate with lenght 0",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:5000/generate?length=0&numbers=1",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"generate"
							],
							"query": [
								{
									"key": "length",
									"value": "0",
									"description": "Between 1 and 200"
								},
								{
									"key": "numbers",
									"value": "1",
									"description": "0 to turn off numbers and 1 to turn on"
								}
							]
						}
					},
					"status": "BAD REQUEST",
					"code": 400,
					"_postman_previewlanguage": "html",
					"header": [
						{
							"key": "Server",
							"value": "Werkzeug/2.2.1 Python/3.8.9"
						},
						{
							"key": "Date",
							"value": "Mon, 08 Aug 2022 19:16:50 GMT"
						},
						{
							"key": "Content-Type",
							"value": "text/html; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "81"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Connection",
							"value": "close"
						}
					],
					"cookie": [],
					"body": "{\"length\": [\"Must be greater than or equal to 5 and less than or equal to 200.\"]}"
				}
			]
		},
		{
			"name": "generate with lenght 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"",
							"pm.test(\"return an error message\", function () {",
							"    response = pm.response.json();",
							"    const proposed_message = \"Must be greater than or equal to 5 and less than or equal to 200.\"",
							"    const message = response[\"error\"][\"length\"][0]",
							"",
							"    pm.expect(message).to.eql(proposed_message);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{local}}/generate?length=201&numbers=1",
					"host": [
						"{{local}}"
					],
					"path": [
						"generate"
					],
					"query": [
						{
							"key": "length",
							"value": "201",
							"description": "Between 1 and 200"
						},
						{
							"key": "numbers",
							"value": "1",
							"description": "0 to turn off numbers and 1 to turn on"
						}
					]
				},
				"description": "#### Generate with length 201:\n\nGenerate error when password length provided is more than 200"
			},
			"response": [
				{
					"name": "generate with lenght 201",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:5000/generate?length=201&numbers=1",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"generate"
							],
							"query": [
								{
									"key": "length",
									"value": "201",
									"description": "Between 1 and 200"
								},
								{
									"key": "numbers",
									"value": "1",
									"description": "0 to turn off numbers and 1 to turn on"
								}
							]
						}
					},
					"status": "BAD REQUEST",
					"code": 400,
					"_postman_previewlanguage": "html",
					"header": [
						{
							"key": "Server",
							"value": "Werkzeug/2.2.1 Python/3.8.9"
						},
						{
							"key": "Date",
							"value": "Mon, 08 Aug 2022 19:16:58 GMT"
						},
						{
							"key": "Content-Type",
							"value": "text/html; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "81"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Connection",
							"value": "close"
						}
					],
					"cookie": [],
					"body": "{\"length\": [\"Must be greater than or equal to 5 and less than or equal to 200.\"]}"
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "local-dev-baseurl",
			"value": "localhost:5000"
		},
		{
			"key": "docker-baseurl",
			"value": "localhost"
		}
	]
}